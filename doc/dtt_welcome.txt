Thank you for signing up for the Developer Testing Tricks talk. This talk is going to be highly interactive. This means, you will be pair programming with your fellow attendees.
To make this possible at least 1/2 of you will need to bring your laptop. I recommend you bringing your laptop, just in case. :)

The application that will be used in the talk is named Pain Point. Its a simple application that allows its users to write what their pain points are and to vote on other members' pain points.

You can get access to the current state of Pain Point at http://github.com/btakita/pain-point/watchers
If you havn't used Git before, it is a great tool to check out. Once you have Git installed, you can clone Pain Point by running `git clone git://github.com/btakita/pain-point.git`.

There a number of interesting technologies in Pain Point including:
* Rails (of course)
* rspec (http://rspec.info)
* Selenium (http://openqa.org)
* Polonium
* the RR double framework (http://github.com/btakita/rr & http://pivots.pivotallabs.com/users/brian/blog/articles/352-introducing-rr)
* Screw Unit javascript behavioral test framework (http://github.com/nkallen/screw-unit)
* Erector view framework (http://erector.rubyforge.org)
* Client server programming using advanced Javascript
* Comet (http://en.wikipedia.org/wiki/Comet_(programming) & http://ajaxian.com/archives/comet-a-new-approach-to-ajax-applications)

Even though technology changes, the basic goals of TDD and other forms of testing remain the same. It is one of the major goals of this tutorial to show commonality of testing techniques across different techonology.

